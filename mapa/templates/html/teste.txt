<div class="search-bar" style="margin-top:20px; margin-left:20px; position:absolute; z-index:2;">
        
    <input type="text" id="origin" placeholder="Pesquise no Mapas">
    <button id="search-icon">
        <i class="fas fa-search"></i>   
    </button>
    <button id="route-icon">
        <i class="fa-solid fa-route" style="color: #0050db;" alt="Traçar Rotas"></i>
    </button>
    <div id="autocomplete-suggestions" style="position: absolute; background: white; border: 1px solid #ccc; max-height: 200px; overflow-y: auto; display: none; z-index: 3; width: 400px;"></div>
</div>

<div class="route-bar" id="route-bar" style="margin-left:20px; position:absolute; z-index:2; margin-top:62px; box-shadow:black;">
    <input type="text" id="destination" placeholder="Digite seu Destino">
    <button id="find-route" class="rtt">Buscar Rota</button>
</div>

<script>

const originInput = document.getElementById('origin');
const suggestionsBox = document.getElementById('autocomplete-suggestions');
// Evento para capturar as teclas digitadas
originInput.addEventListener('input', function () {
    const query = originInput.value.trim();
    if (query.length < 3) {
        suggestionsBox.style.display = 'none';
        return;
    }

    // Faz a chamada à API do Nominatim para buscar sugestões
    fetch(`https://nominatim.openstreetmap.org/search?q=Rio de Janeiro&countrycodes=BR&format=json&q=${encodeURIComponent(query)}&addressdetails=1&limit=5`)
        .then(response => response.json())
        .then(data => {
            if (data.length === 0) {
                suggestionsBox.style.display = 'none';
                return;
            }

            // Limpa sugestões anteriores
            suggestionsBox.innerHTML = '';

            // Exibe novas sugestões
            data.forEach(item => {
                const suggestion = document.createElement('div');
                suggestion.textContent = item.display_name;
                suggestion.dataset.lat = item.lat;
                suggestion.dataset.lon = item.lon;
                suggestionsBox.appendChild(suggestion);
            });

            suggestionsBox.style.display = 'block';
        })
        .catch(err => console.error('Erro ao buscar sugestões:', err));
});

// Evento para selecionar uma sugestão
suggestionsBox.addEventListener('click', function (e) {
    if (e.target && e.target.dataset.lat && e.target.dataset.lon) {
        const selectedSuggestion = e.target.textContent;
        const lat = e.target.dataset.lat;
        const lon = e.target.dataset.lon;

        // Preenche o campo de pesquisa com a sugestão selecionada
        originInput.value = selectedSuggestion;

        // Centraliza o mapa na localização selecionada
        map.setView([lat, lon], 14);

        // Oculta o box de sugestões
        suggestionsBox.style.display = 'none';
    }
});

// Oculta as sugestões se clicar fora do campo ou do dropdown
document.addEventListener('click', function (e) {
    if (!originInput.contains(e.target) && !suggestionsBox.contains(e.target)) {
        suggestionsBox.style.display = 'none';
    }
});



</script>

<script>
    const routeIcon = document.getElementById('route-icon');
    const routeBar = document.getElementById('route-bar');

    routeIcon.addEventListener('click', () => {
        routeBar.style.display = routeBar.style.display === 'flex' ? 'none' : 'flex';
    });

    let currentRouteLayer = null; // Variável global para armazenar a camada atual da rota

document.getElementById('find-route').addEventListener('click', () => {
const origin = document.getElementById('origin').value;
const destination = document.getElementById('destination').value;

if (!origin || !destination) {
    alert('Por favor, preencha o ponto de origem e destino.');
    return;
}

// Usa a API de geocodificação do Nominatim para converter endereços em coordenadas
const geocodeURL = (address) =>
    `https://nominatim.openstreetmap.org/search?q=Rio de Janeiro&countrycodes=BR&format=json&q=${encodeURIComponent(address)}`;

Promise.all([
    fetch(geocodeURL(origin)).then(res => res.json()),
    fetch(geocodeURL(destination)).then(res => res.json())
])
.then(([originData, destinationData]) => {
    if (originData.length === 0 || destinationData.length === 0) {
        alert('Não foi possível localizar um dos endereços.'); return; }
        const originCoords = [originData[0].lat, originData[0].lon];
        const destinationCoords = [destinationData[0].lat, destinationData[0].lon];
    
        // Chamada à API OSRM para calcular a rota
        const routeURL = `https://router.project-osrm.org/route/v1/driving/${originCoords[1]},${originCoords[0]};${destinationCoords[1]},${destinationCoords[0]}?overview=full&geometries=geojson`;
    
        return fetch(routeURL)
            .then(res => res.json())
            .then(routeData => {
                if (routeData.routes.length === 0) {
                    alert('Nenhuma rota encontrada.');
                    return;
                }
    
                // Remove a rota anterior (se existir)
                if (currentRouteLayer) {
                    map.removeLayer(currentRouteLayer);
                }
    
                // Adiciona a nova rota ao mapa
                const route = routeData.routes[0].geometry;
                currentRouteLayer = L.geoJSON(route, {
                    style: {
                        color: 'blue',
                        weight: 4
                    }
                }).addTo(map);
    
                // Centraliza o mapa na nova rota
                map.fitBounds(currentRouteLayer.getBounds());
            });
    })
    .catch(error => console.error('Erro ao traçar a rota:', error));
    
});

</script>

